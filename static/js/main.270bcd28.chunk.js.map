{"version":3,"sources":["context.js","TodoItem.js","types.js","TodoList.js","reducer.js","App.js","serviceWorker.js","index.js"],"names":["Context","createContext","undefined","TodoItem","title","id","completed","dispatch","useContext","cls","push","className","join","type","checked","onChange","payload","onClick","TodoList","todos","map","item","key","state","action","Date","now","todo","filter","App","useReducer","Reducer","JSON","parse","localStorage","getItem","useState","todoTitle","seTodoTitle","useEffect","setItem","stringify","Provider","value","event","target","onKeyPress","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gMAEaA,EAAUC,6BAAcC,OAAWA,GCEjC,SAASC,EAAT,GAA2C,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,UACpCC,EAAYC,qBAAWR,GAAvBO,SACDE,EAAM,CAAC,QAMb,OAJGH,GACDG,EAAIC,KAAK,aAIT,wBAAIC,UAAWF,EAAIG,KAAK,MACtB,+BACE,2BACEC,KAAK,WACLC,QAASR,EACTS,SAAU,kBAAIR,EAAS,CAACM,KCjBN,eDiB0BG,QAASX,OAEvD,8BAAOD,GAEP,uBACEO,UAAU,0BACVM,QAAS,kBAAIV,EAAS,CAACM,KCtBL,eDsByBG,QAASX,MAFtD,YEnBO,SAASa,EAAT,GAA4B,IAATC,EAAQ,EAARA,MAChC,OACE,4BACGA,EAAMC,KAAI,SAAAC,GAAI,OAAI,kBAAClB,EAAD,eAAUmB,IAAKD,EAAKhB,IAAQgB,Q,WCJtC,WAAUE,EAAOC,GAC/B,OAAQA,EAAOX,MACd,IFJuB,YEKtB,MAAM,GAAN,mBACKU,GADL,CAEE,CACClB,GAAIoB,KAAKC,MACTtB,MAAOoB,EAAOR,QACdV,WAAW,KAGf,IFZ0B,eEazB,OAAOiB,EAAMH,KAAI,SAAAO,GAIhB,OAHGA,EAAKtB,KAAOmB,EAAOR,UACrBW,EAAKrB,WAAcqB,EAAKrB,WAElBqB,KAGT,IFnB0B,eEoBzB,OAAOJ,EAAMK,QAAO,SAAAD,GAAI,OAAIA,EAAKtB,KAAOmB,EAAOR,WAEhD,QACC,OAAOO,ICnBK,SAASM,IAAO,IAAD,EACHC,qBAAWC,EACnCC,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,IAFlB,mBACtBZ,EADsB,KACfhB,EADe,OAII6B,mBAAS,IAJb,mBAItBC,EAJsB,KAIXC,EAJW,KAM7BC,qBAAU,WACTL,aAAaM,QAAQ,QAASR,KAAKS,UAAUlB,MAC3C,CAACA,IASJ,OACE,kBAACvB,EAAQ0C,SAAT,CAAkBC,MAAO,CACxBpC,aAEA,yBAAKI,UAAU,aACd,wCAEA,yBAAKA,UAAU,eACd,2BACEgC,MAAON,EACPxB,KAAK,OACLE,SAAU,SAAA6B,GACTN,EAAYM,EAAMC,OAAOF,QAE1BG,WArBS,SAACF,GACE,UAAdA,EAAMtB,MACTf,EAAS,CAACM,KHlBY,YGkBKG,QAASqB,IACpCC,EAAY,QAoBT,6CAGD,kBAACpB,EAAD,CAAUC,MAAOI,M,MC9BFwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAACxB,EAAD,MAASyB,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.270bcd28.chunk.js","sourcesContent":["import {createContext} from \"react\";\n\nexport const Context = createContext(undefined, undefined);","import React, {useContext} from 'react'\nimport {Context} from \"./context\";\nimport {CHANGE_TODOS, REMOVE_TODOS} from \"./types\";\n\nexport default function TodoItem({title, id, completed}) {\n  const {dispatch} = useContext(Context);\n  const cls = [\"todo\"];\n\n  if(completed){\n    cls.push(\"completed\")\n  }\n\n  return (\n    <li className={cls.join(' ')}>\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={completed}\n          onChange={()=>dispatch({type: CHANGE_TODOS, payload: id})}\n        />\n        <span>{title}</span>\n\n        <i\n          className=\"material-icons red-text\"\n          onClick={()=>dispatch({type: REMOVE_TODOS, payload: id})}\n        >\n          delete\n        </i>\n      </label>\n    </li>\n  )\n}","export const ADD_TODOS = 'ADD_TODOS'\nexport const CHANGE_TODOS = 'CHANGE_TODOS'\nexport const REMOVE_TODOS = 'REMOVE_TODOS'\n","import React from 'react'\nimport TodoItem from './TodoItem'\n\nexport default function TodoList({todos}) {\n  return (\n    <ul>\n      {todos.map(item => <TodoItem key={item.id} {...item} />)}\n    </ul>\n  )\n}","import {ADD_TODOS, CHANGE_TODOS, REMOVE_TODOS} from \"./types\";\n\nexport default function (state, action) {\n\tswitch (action.type) {\n\t\tcase ADD_TODOS:\n\t\t\treturn [\n\t\t\t\t\t...state,\n\t\t\t\t\t{\n\t\t\t\t\t\tid: Date.now(),\n\t\t\t\t\t\ttitle: action.payload,\n\t\t\t\t\t\tcompleted: false\n\t\t\t\t\t}\n\t\t\t]\n\t\tcase CHANGE_TODOS:\n\t\t\treturn state.map(todo => {\n\t\t\t\tif(todo.id === action.payload) {\n\t\t\t\t\ttodo.completed = ! todo.completed\n\t\t\t\t}\n\t\t\t\treturn todo\n\t\t\t})\n\n\t\tcase REMOVE_TODOS:\n\t\t\treturn state.filter(todo => todo.id !== action.payload)\n\n\t\tdefault:\n\t\t\treturn state\n\t}\n}","import React, {useEffect, useReducer, useState} from 'react'\nimport TodoList from './TodoList'\nimport {Context} from \"./context\";\nimport Reducer from './reducer'\nimport {ADD_TODOS} from \"./types\";\n\nexport default function App() {\n\tconst [state, dispatch] = useReducer(Reducer,\n\t\t\tJSON.parse(localStorage.getItem('todos')) || [])\n\n\tconst [todoTitle, seTodoTitle] = useState('')\n\n\tuseEffect(() => {\n\t\tlocalStorage.setItem('todos', JSON.stringify(state))\n\t}, [state]);\n\n\tconst addTodo = (event) => {\n\t\tif (event.key === \"Enter\") {\n\t\t\tdispatch({type: ADD_TODOS, payload: todoTitle})\n\t\t\tseTodoTitle('')\n\t\t}\n\t}\n\n\treturn (\n\t\t\t<Context.Provider value={{\n\t\t\t\tdispatch\n\t\t\t}}>\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<h1>Todo app</h1>\n\n\t\t\t\t\t<div className=\"input-field\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tvalue={todoTitle}\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tonChange={event => {\n\t\t\t\t\t\t\t\t\tseTodoTitle(event.target.value)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tonKeyPress={addTodo}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<label>Todo name</label>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<TodoList todos={state}/>\n\t\t\t\t</div>\n\t\t\t</Context.Provider>\n\t);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'materialize-css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}